

* Package manager
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

* IDE
** Company
#+begin_src emacs-lisp
;; (use-package company-mode)
(use-package company
  :straight t
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-box-doc-delay 0.0
        company-idle-delay 0.0))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))
#+end_src

** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-delay 0.0
        lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-show-with-mouse t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-delay 0.0))

(use-package lsp-mode
  :straight t
  :hook (c-mode . lsp-mode))

(use-package lsp-pyright
  :straight t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

#+end_src


** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :straight t
  :hook (prog-mode . rainbow-mode))
#+end_src

** Languages
*** Ron mode
#+begin_src emacs-lisp
(use-package ron-mode
  :straight t
  :mode ("\\.ron\\'" . ron-mode))
#+end_src

*** Go mode
#+begin_src emacs-lisp
(use-package go-mode
  :straight t
  :mode ("\\.go\\" . go-mode)
  :config
  (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

* Packages
** Evil
#+begin_src emacs-lisp
(defvar bootstrap-version)
(use-package evil
  :straight t
  :init
  (setq evil-want-keybinding nil
        evil-want-integration t
        evil-want-C-u-scroll t
        evil-undo-system 'undo-redo)
  :config
  (evil-mode 1))

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+end_src


** Aggressive indent
A good implementation of automatic indenting
#+begin_src emacs-lisp
(use-package aggressive-indent
  :straight t
  :config (global-aggressive-indent-mode))
#+end_src
 
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :config
  (which-key-mode 1))
#+end_src

** Mini echo mode bar
#+begin_src emacs-lisp
(use-package hide-mode-line
  :straight t)

(use-package mini-echo
  :straight t
  :config
  (setq mini-echo-default-segments
   '(:long ("major-mode" "buffer-name" "vcs" "buffer-position"
            "buffer-size" "flymake" "process" "selection-info"
            "narrow" "macro" "profiler")
     :short ("buffer-name-short" "buffer-position" "process"
             "profiler" "selection-info" "narrow" "macro")))
  (mini-echo-mode))
#+end_src

** Completion
#+begin_src emacs-lisp
(use-package hotfuzz
  :straight t)

(use-package vertico
  :straight t
  :config
  (setq completion-styles '(hotfuzz))
  (vertico-mode 1)
  (vertico-mouse-mode 1))

(use-package marginalia
  :straight t
  :init
  (marginalia-mode 1))

(use-package vertico-posframe
  :straight t
  :config
  (vertico-posframe-mode 1))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package timu-macos-theme
  :straight t
  :config
  (load-theme 'timu-macos t))
#+end_src

** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :straight t
  :hook (text-mode . olivetti-mode)
  :config
  (setq olivetti-style 'fancy
        olivetti-minimum-body-width 100
        olivetti-body-width 100))

(custom-set-faces
  '(olivetti-fringe ((t :background "#2C2E34"))))

(setq modus-themes-common-palette-overrides
      '((fringe bg-active)))
#+end_src

** Flyspell popup
#+begin_src emacs-lisp
(use-package flyspell-popup
  :straight t
  :hook (flyspell-mode . flyspell-popup-auto-correct-mode))
#+end_src

** Org automatic latex
#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :hook (org-mode . org-fragtog-mode)
  :custom
  (setq org-startup-with-latex-preview t)
  (org-format-latex-options
     (plist-put org-format-latex-options :scale 3)
     (plist-put org-format-latex-options :foreground 'auto)
     (plist-put org-format-latex-options :background 'auto)))
#+end_src

** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star "◉✿❀◆◇☢✚✸"))
#+end_src
  
* Org Mode
** Add org-tempo for keybindings
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Hide * when making bold text
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Fix org indenting
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)

;; No indenting in src blocks
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src

** Add word wrapping
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

** Fix exporting to latex
#+begin_src emacs-lisp
(setq org-export-preserve-breaks t)
#+end_src

* Spellcheck
** Use flyspell on text buffers
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

** Set the default dictionary
#+begin_src  emacs-lisp
(setq ispell-dictionary "svenska")
#+end_src

* Keybindings
#+begin_src emacs-lisp

(defun ansi-term-mksh ()
  (interactive)
  (ansi-term "/usr/bin/mksh"))

(evil-set-leader 'motion (kbd "SPC"))
(evil-define-key 'normal 'global (kbd "<leader>ff") 'find-file)

(evil-define-key 'normal 'global (kbd "<leader>bi") 'ibuffer)
(evil-define-key 'normal 'global (kbd "<leader>bk") 'kill-this-buffer)
(evil-define-key 'normal 'global (kbd "<leader>br") 'revert-buffer)
(evil-define-key 'normal 'global (kbd "<leader>bs") 'scratch-buffer)

(evil-define-key 'normal 'global (kbd "z=") 'flyspell-popup-correct)
(evil-define-key 'normal 'global (kbd "<leader>id") 'ispell-change-dictionary)

(evil-define-key 'normal 'global (kbd "<leader>tc") 'shell-command)
(evil-define-key 'normal 'global (kbd "<leader>tt") 'ansi-term-mksh)

(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Other settings
** Disable backup files
#+begin_src emacs-lisp
(setq make-backup-files nil
      create-lockfiles nil
      backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

** Enable pretty symbols
Makes things more pretty such as replacing lambda with the greek letter lambda in lisp-mode.
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
#+end_src
 
** Disable cursor blinking
#+begin_src emacs-lisp
(blink-cursor-mode -1)
#+end_src

** Automatic delimiter pairs
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Enable some disabled commands
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

** Transparent background
 #+begin_src emacs-lisp
 (add-to-list 'default-frame-alist '(alpha-background . 95))
 #+end_src

** Make scrolling with jk more natural
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-margin 5)
#+end_src

** Disable some gui elements
#+begin_src emacs-lisp
(tool-bar-mode -1)

(setq use-dialog-box nil
      use-short-answers t)
#+end_src

** Change the font
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "DroidSansM Nerd Font-12" ))
(set-face-attribute 'default t :font "DroidSansM Nerd Font-12" )
;; (set-frame-font "Noto Sans Mono 11" nil t)
;; (set-frame-font "Droid Sans Mono 11" nil t)
;; (set-frame-font "Kosugi Maru 12" nil t)
#+end_src

** Line numbers in prog-mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Better mode line
#+begin_src emacs-lisp
;; (column-number-mode 1)
;; (display-battery-mode 1)
;; (setq display-time-24hr-format t)
;; (display-time-mode 1)
#+end_src

** Allow mouse usage in the terminal
#+begin_src
(xterm-mouse-mode 1)
#+end_src

** Start with a blank org scratch buffer
#+begin_src emacs-lisp
(setq inhibit-startup-message t  
      initial-scratch-message "* GNU Emacs"
      initial-major-mode 'org-mode)
#+end_src

