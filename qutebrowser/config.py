# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don"t accept cookies at all.
config.set("content.cookies.accept", "all", "chrome-devtools://*")

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don"t accept cookies at all.
config.set("content.cookies.accept", "all", "devtools://*")

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set("content.headers.accept_language", "", "https://matchmaker.krunker.io/*")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set("content.headers.user_agent", "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}", "https://web.whatsapp.com/")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set("content.headers.user_agent", "Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0", "https://accounts.google.com/*")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set("content.headers.user_agent", "Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36", "https://*.slack.com/*")

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "chrome-devtools://*")

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome-devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome://*/*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "qute://*/*")




###################
## MY OWN CONFIG ##
###################
import os

home = os.getenv("HOME")
css = f"{home}/.config/qutebrowser/css"
apprentice = f"{css}/apprentice-all-sites.css"
default = f"{css}/default.css"

config.bind("<Ctrl-Shift-d>", f"set content.user_stylesheets {apprentice}")
config.bind("<Ctrl-Shift-l>", f"set content.user_stylesheets {default}")
# config.set("content.user_stylesheets", stylesheet)
config.set("url.searchengines", {
    "DEFAULT": "https://searx.wenn.website/search?q={}",
    "searxng": "https://searx.wenn.website/search?q={}",
    "ddg": "https://duckduckgo.com/?q={}",
    "google": "https://google.se/search?q={}"
    })
config.set("url.open_base_url", True)
    
config.set("url.start_pages", "https://ssis.nu/")
config.set("url.default_page", "https://ssis.nu/")

config.set("window.title_format", "{perc}{current_title}")

config.set("colors.webpage.preferred_color_scheme", "dark")

# Colemak homerow
config.set("hints.chars", "arstdhneio")

###########
## THEME ##
###########

palette = {
    "base": "#1D212F",
    "text": "#E4F0FC",

    "subtext1": "#ADD7FF",
    "subtext0": "#ADD7FF",
    "overlay2": "#91B4D5",
    "overlay1": "#7390AA",
    "overlay0": "#7390AA",
    "surface2": "#506477",
    "surface1": "#506477",
    "surface0": "#232937",
    "mantle": "#1D212F",
    "crust": "#1D212F",


    "rosewater": "#FFCB6B",
    "flamingo": "#FFCB6B",
    "pink": "#DF4577",
    "mauve": "#C792EA",
    "red": "#FF5370",
    "maroon": "#FF5370",
    "peach": "#FFCB6B",
    "yellow": "#FFCB6B",
    "green": "#C3E88D",
    "teal": "#89DDFF",
    "sky": "#89DDFF",
    "sapphire": "#89DDFF",
    "blue": "#89DDFF",
    "lavender": "#C792EA",



    # "fg_green1": "#27E8A7",
    # "fg_green2": "#31AE84",
    # "fg_green3": "#43675B",
    
    # "black": "#676E95",
    # "red": "#FF5370",
    # "green": "#C3E88D",
    # "yellow": "#FFCB6B",
    # "blue": "#82AAFF",
    # "magenta": "#C792EA",
    # "cyan": "#89DDFF",
    # "white": "#FFFFFF"
}


# completion {{{
## Background color of the completion widget category headers.
c.colors.completion.category.bg = palette["base"]
## Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = palette["mantle"]
## Top border color of the completion widget category headers.
c.colors.completion.category.border.top = palette["overlay2"]
## Foreground color of completion widget category headers.
c.colors.completion.category.fg = palette["green"]
    
## Background color of the completion widget for even and odd rows.
c.colors.completion.even.bg = palette["mantle"]
c.colors.completion.odd.bg = c.colors.completion.even.bg
## Text color of the completion widget.
c.colors.completion.fg = palette["subtext0"]

## Background color of the selected completion item.
c.colors.completion.item.selected.bg = palette["surface2"]
## Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = palette["surface2"]
## Top border color of the completion widget category headers.
c.colors.completion.item.selected.border.top = palette["surface2"]
## Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = palette["text"]
## Foreground color of the selected completion item.
c.colors.completion.item.selected.match.fg = palette["rosewater"]
## Foreground color of the matched text in the completion.
c.colors.completion.match.fg = palette["text"]

## Color of the scrollbar in completion view
c.colors.completion.scrollbar.bg = palette["crust"]
## Color of the scrollbar handle in completion view.
c.colors.completion.scrollbar.fg = palette["surface2"]
# }}}

# downloads {{{
c.colors.downloads.bar.bg = palette["base"]
c.colors.downloads.error.bg = palette["base"]
c.colors.downloads.start.bg = palette["base"]
c.colors.downloads.stop.bg = palette["base"]

c.colors.downloads.error.fg = palette["red"]
c.colors.downloads.start.fg = palette["blue"]
c.colors.downloads.stop.fg = palette["green"]
c.colors.downloads.system.fg = "none"
c.colors.downloads.system.bg = "none"
# }}}

# hints {{{
## Background color for hints. Note that you can use a `rgba(...)` value
## for transparency.
c.colors.hints.bg = palette["peach"]

## Font color for hints.
c.colors.hints.fg = palette["mantle"]

## Hints
c.hints.border = "1px solid " + palette["mantle"]

## Font color for the matched part of hints.
c.colors.hints.match.fg = palette["subtext1"]
# }}}

# keyhints {{{
## Background color of the keyhint widget.
c.colors.keyhint.bg = palette["mantle"]

## Text color for the keyhint widget.
c.colors.keyhint.fg = palette["text"]

## Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = palette["subtext1"]
# }}}

# messages {{{
## Background color of an error message.
c.colors.messages.error.bg = palette["overlay0"]
## Background color of an info message.
c.colors.messages.info.bg = palette["overlay0"]
## Background color of a warning message.
c.colors.messages.warning.bg = palette["overlay0"]

## Border color of an error message.
c.colors.messages.error.border = palette["mantle"]
## Border color of an info message.
c.colors.messages.info.border = palette["mantle"]
## Border color of a warning message.
c.colors.messages.warning.border = palette["mantle"]

## Foreground color of an error message.
c.colors.messages.error.fg = palette["red"]
## Foreground color an info message.
c.colors.messages.info.fg = palette["text"]
## Foreground color a warning message.
c.colors.messages.warning.fg = palette["peach"]
# }}}

# prompts {{{
## Background color for prompts.
c.colors.prompts.bg = palette["mantle"]

# ## Border used around UI elements in prompts.
c.colors.prompts.border = "1px solid " + palette["overlay0"]

## Foreground color for prompts.
c.colors.prompts.fg = palette["text"]

## Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = palette["surface2"]

## Background color for the selected item in filename prompts.
c.colors.prompts.selected.fg = palette["rosewater"]
# }}}

# statusbar {{{
## Background color of the statusbar.
c.colors.statusbar.normal.bg = palette["base"]
## Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = palette["crust"]
## Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = palette["base"]
## Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = palette["base"]
## Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = palette["base"]

## Background color of the progress bar.
c.colors.statusbar.progress.bg = palette["base"]
## Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = palette["base"]

## Foreground color of the statusbar.
c.colors.statusbar.normal.fg = palette["text"]
## Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = palette["rosewater"]
## Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = palette["text"]
## Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = palette["peach"]
## Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = palette["peach"]
## Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = palette["peach"]

## Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = palette["red"]

## Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = palette["text"]

## Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = palette["sky"]

## Foreground color of the URL in the statusbar on successful load
c.colors.statusbar.url.success.http.fg = palette["teal"]

## Foreground color of the URL in the statusbar on successful load
c.colors.statusbar.url.success.https.fg = palette["green"]

## Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = palette["yellow"]

## PRIVATE MODE COLORS
## Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = palette["mantle"]
## Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = palette["subtext1"]
## Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = palette["base"]
## Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = palette["subtext1"]

# }}}

# tabs {{{
## Background color of the tab bar.
c.colors.tabs.bar.bg = palette["crust"]
## Background color of unselected even tabs.
c.colors.tabs.even.bg = palette["surface2"]
## Background color of unselected odd tabs.
c.colors.tabs.odd.bg = palette["surface1"]

## Foreground color of unselected even tabs.
c.colors.tabs.even.fg = palette["overlay2"]
## Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = palette["overlay2"]

## Color for the tab indicator on errors.
c.colors.tabs.indicator.error = palette["red"]
## Color gradient interpolation system for the tab indicator.
## Valid values:
##	 - rgb: Interpolate in the RGB color system.
##	 - hsv: Interpolate in the HSV color system.
##	 - hsl: Interpolate in the HSL color system.
##	 - none: Don't show a gradient.
c.colors.tabs.indicator.system = "none"

# ## Background color of selected even tabs.
c.colors.tabs.selected.even.bg = palette["base"]
# ## Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = palette["base"]

# ## Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = palette["text"]
# ## Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = palette["text"]
# }}}

# context menus {{{
c.colors.contextmenu.menu.bg = palette["base"]
c.colors.contextmenu.menu.fg = palette["text"]

c.colors.contextmenu.disabled.bg = palette["mantle"]
c.colors.contextmenu.disabled.fg = palette["overlay0"]

c.colors.contextmenu.selected.bg = palette["overlay0"]
c.colors.contextmenu.selected.fg = palette["rosewater"]
# }}}

# background color for webpages {{{
c.colors.webpage.bg = palette["base"]
# }}}
